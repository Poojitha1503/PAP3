# -*- coding: utf-8 -*-
"""poojitha.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nRymmmzoRDVZM2-4kh8ArQ9-qleh-zqn
"""

# logs_simulation.py

"""
This script simulates network performance metrics like throughput, RTT, and packet loss
for various congestion control protocols under different network conditions.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Duration of simulation in seconds
simulation_time = 60
time_series = np.linspace(0, simulation_time, num=simulation_time)

# Function to simulate metrics based on protocol and scenario
def generate_metrics(protocol, network_condition):
    np.random.seed(hash(protocol + network_condition) % (2**32))

    if network_condition == "low_latency_high_bw":
        if protocol == "BBR":
            throughput = np.clip(np.random.normal(45, 2, simulation_time), 40, 50)
            rtt = np.clip(np.random.normal(12, 1.5, simulation_time), 10, 20)
            loss = np.clip(np.random.normal(0.1, 0.05, simulation_time), 0, 0.5)
        elif protocol == "Copa":
            throughput = np.clip(np.random.normal(42, 2.5, simulation_time), 35, 46)
            rtt = np.clip(np.random.normal(11, 1.2, simulation_time), 9, 18)
            loss = np.clip(np.random.normal(0.05, 0.02, simulation_time), 0, 0.3)
        else:  # Vegas
            throughput = np.clip(np.random.normal(35, 3, simulation_time), 25, 40)
            rtt = np.clip(np.random.normal(10, 1.5, simulation_time), 8, 18)
            loss = np.clip(np.random.normal(0.02, 0.01, simulation_time), 0, 0.1)
    else:  # high_latency_low_bw
        if protocol == "BBR":
            throughput = np.clip(np.random.normal(0.9, 0.1, simulation_time), 0.7, 1.1)
            rtt = np.clip(np.random.normal(210, 15, simulation_time), 190, 250)
            loss = np.clip(np.random.normal(1.5, 0.3, simulation_time), 0.8, 3)
        elif protocol == "Copa":
            throughput = np.clip(np.random.normal(0.8, 0.1, simulation_time), 0.6, 1.0)
            rtt = np.clip(np.random.normal(180, 10, simulation_time), 160, 200)
            loss = np.clip(np.random.normal(0.8, 0.2, simulation_time), 0.4, 1.5)
        else:  # Vegas
            throughput = np.clip(np.random.normal(0.6, 0.1, simulation_time), 0.4, 0.8)
            rtt = np.clip(np.random.normal(170, 10, simulation_time), 150, 190)
            loss = np.clip(np.random.normal(0.5, 0.1, simulation_time), 0.2, 1.0)

    # Return data as a DataFrame
    return pd.DataFrame({
        "time": time_series,
        "throughput_Mbps": throughput,
        "rtt_ms": rtt,
        "loss_percent": loss
    })

# Define protocols and test scenarios
protocols = ["BBR", "Copa", "Vegas"]
conditions = ["low_latency_high_bw", "high_latency_low_bw"]
simulation_results = {}

# Generate metrics for each protocol-scenario combination
for proto in protocols:
    for cond in conditions:
        result_key = f"{proto}_{cond}"
        simulation_results[result_key] = generate_metrics(proto, cond)

# Preview one result set
simulation_results["BBR_low_latency_high_bw"].head()

from matplotlib import pyplot as plt
_df_14['loss_percent'].plot(kind='line', figsize=(8, 4), title='loss_percent')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
_df_13['rtt_ms'].plot(kind='line', figsize=(8, 4), title='rtt_ms')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
_df_12['throughput_Mbps'].plot(kind='line', figsize=(8, 4), title='throughput_Mbps')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
_df_11['time'].plot(kind='line', figsize=(8, 4), title='time')
plt.gca().spines[['top', 'right']].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  counted = (series['time']
                .value_counts()
              .reset_index(name='counts')
              .rename({'index': 'time'}, axis=1)
              .sort_values('time', ascending=True))
  xs = counted['time']
  ys = counted['counts']
  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = _df_10.sort_values('time', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('time')
_ = plt.ylabel('count()')

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['time']
  ys = series['loss_percent']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = _df_9.sort_values('time', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('time')
_ = plt.ylabel('loss_percent')

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['time']
  ys = series['rtt_ms']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = _df_8.sort_values('time', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('time')
_ = plt.ylabel('rtt_ms')

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['time']
  ys = series['throughput_Mbps']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = _df_7.sort_values('time', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('time')
_ = plt.ylabel('throughput_Mbps')

from matplotlib import pyplot as plt
_df_6.plot(kind='scatter', x='rtt_ms', y='loss_percent', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_5.plot(kind='scatter', x='throughput_Mbps', y='rtt_ms', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_4.plot(kind='scatter', x='time', y='throughput_Mbps', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_3['loss_percent'].plot(kind='hist', bins=20, title='loss_percent')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_2['rtt_ms'].plot(kind='hist', bins=20, title='rtt_ms')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_1['throughput_Mbps'].plot(kind='hist', bins=20, title='throughput_Mbps')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
_df_0['time'].plot(kind='hist', bins=20, title='time')
plt.gca().spines[['top', 'right',]].set_visible(False)